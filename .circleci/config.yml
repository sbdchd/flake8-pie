version: 2
jobs:
  test:
    docker:
      - image: circleci/python:3.6.1

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.lock" }}
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            # Install with `--user` because we don't own root
            python3 -m pip install --user poetry===0.11.5
            # Install our dev dependencies
            poetry install
      - save_cache:
          paths:
            - ./.mypy_cache
            - /home/circleci/.cache/pypoetry/
          key: v1-dependencies-{{ checksum "pyproject.lock" }}

      - run:
          name: run tests
          command: |
            # NOTE: we have to do some finagling to get python paths to work
            # see:
            #   https://github.com/pytest-dev/pytest/issues/2287
            #   https://stackoverflow.com/a/26544761/3720597
            PYTHONPATH=. poetry run pytest


  lint:
    docker:
      - image: circleci/python:3.6.1

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pyproject.lock" }}
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            # Install with `--user` because we don't own root
            python3 -m pip install --user poetry===0.11.5
            # Install our dev dependencies
            poetry install
      - save_cache:
          paths:
            - ./.mypy_cache
            - /home/circleci/.cache/pypoetry/
          key: v1-dependencies-{{ checksum "pyproject.lock" }}

      - run:
          name: run lint
          command: |
            poetry run mypy *.py
            poetry run black --check .
            poetry run flake8 .


workflows:
  version: 2
  test:
    jobs:
      - test
      - lint
